@using DogCRM.Areas.Admin.Models
@{
    @model DogCRM.Areas.Admin.Models.EventModel

}
<div class="login-box-body" onkeydown="return (event.keyCode!=13)">
    @if (@TempData["Success"] != null)
    {
        <div class="alert btn-success" id="msgDisply">
            <span> @TempData["Success"]</span>
        </div>
    }
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.HiddenFor(x => x.ImagesUrl)
            @Html.LabelFor(model => model.ImagesUrl, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.PostedImage, "", new { @type = "file", @multiple = "multiple", @class = "form-control", @autocomplete = "off", @onchange = "ShowPreview(this)" })
            @Html.ValidationMessageFor(model => model.PostedImage, "", new { @class = "text-danger" })

            <div id="divImageMediaPreview">
            </div>
            @if (Model != null)
            {
                if (!string.IsNullOrEmpty(Model.ImagesUrl))
                {
                    var res = Model.ImagesUrl.Split(',');
                    foreach (var re in Model.ImagesUrl.Split(','))
                    {
                        <img src="~/Areas/Admin/UploadedFiles/@Url.Content(re)" class="img-rounded" style="max-width:80px;margin:1%;" />
                    }
                }
            }
        </div>
        <div class="col-sm-6">
            @Html.LabelFor(model => model.Location, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Location, new { @class = "form-control", @placeholder = "Please click on your location", @autocomplete = "off", @id = "txtLocation", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.Location, "", new { @class = "text-danger" })
            <div ng-controller="Ctrl">
                @Html.HiddenFor(x => x.lat)
                @Html.HiddenFor(x => x.lng)
                @*<input id="lat" type="text" />
                    <input id="lng" type="text" />*@
            </div>
            <div class="form-group col-sm-12">
                <div id="map_canvas" style="width:100%;height:200px;margin:1%;"></div>
                @*<div id="map" style="width:100%;height:200px;margin:1%;"></div>*@
                @*<pre id="info"></pre>*@
                <div id="geocoder" class="geocoder"></div>
            </div>
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.LabelFor(model => model.EventName, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.EventName, new { @class = "form-control", @placeholder = "Enter Event Name", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.EventName, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-6">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Description, new { @class = "form-control", @placeholder = "Enter Description", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-12">
            @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.Address, new { @class = "form-control", @placeholder = "Enter Address", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.LabelFor(model => model.EventType, htmlAttributes: new { @class = "control-label" })
            @Html.DropDownListFor(m => m.EventType, new SelectList(ViewBag.EventCategory, "Value", "Text"), "Please select", new { @id = "ddlEvent", @class = "form-control" })
            @Html.ValidationMessageFor(m => m.EventType, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-6">
            @Html.LabelFor(model => model.EventPrice, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.EventPrice, new { @class = "form-control", @placeholder = "Enter event Price", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.EventPrice, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.HiddenFor(x => x.VideosUrl)
            @Html.LabelFor(model => model.VideosUrl, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.PostedVideo, "", new { @type = "file", @multiple = "multiple", @class = "form-control", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.PostedVideo, "", new { @class = "text-danger" })
            @if (Model != null)
            {
                if (!string.IsNullOrEmpty(Model.VideosUrl))
                {
                    var res = Model.VideosUrl.Split(',');
                    foreach (var re in Model.VideosUrl.Split(','))
                    {
                        @*<video controls src="~/Areas/Admin/UploadedVideos/@Url.Content(re)" preload="none" class="img-rounded" style="width:150px;height:100px;margin:1%;"></video>*@
                        <video controls src="https://www.youtube.com/embed/@Url.Content(re)" preload="none" class="img-rounded" style="width:150px;height:100px;margin:1%;"></video>
                    }
                }
            }
        </div>
        <div class="col-sm-6">
            @Html.LabelFor(model => model.videoTitle, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.videoTitle, new { @class = "form-control", @placeholder = "Enter video title", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.videoTitle, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.LabelFor(model => model.videoDescription, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.videoDescription, new { @class = "form-control", @placeholder = "Enter video description", @autocomplete = "off" })
            @Html.ValidationMessageFor(model => model.videoDescription, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-6">
            @Html.HiddenFor(x => x.Tags, new { @id = "txtTaglist" })
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label" })
            <input name="tags" id="input-tags" class="form-control txtTgs" />
        </div>
    </div>
    <div class="form-group col-sm-12">
        <div class="col-sm-6">
            @Html.LabelFor(model => model.StartDateTime, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.StartDateTime, new { @class = "form-control", @placeholder = "Enter Start Datetime", @id = "txtstartdate", @autocomplete = "off", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.StartDateTime, "", new { @class = "text-danger" })
        </div>
        <div class="col-sm-6">
            @Html.LabelFor(model => model.EndDateTime, htmlAttributes: new { @class = "control-label" })
            @Html.TextBoxFor(model => model.EndDateTime, new { @id = "txtEndtime", @class = "form-control", @placeholder = "Enter End DateTime", @autocomplete = "off", @readonly = "readonly" })
            @Html.ValidationMessageFor(model => model.EndDateTime, "", new { @class = "text-danger" })
        </div>

    </div>
    <br />
    <br />
    <div class="box-footer">
        <div class="pull-left col-sm-12">
            <button id="btncancel" type="button" class="btn btn-danger" data-dismiss="modal" onclick="location.href='@Url.Action("CreateEvent","EventManager")';">Cancel</button>
            <button id="btnSave" type="submit" class="btn btn-primary">Save</button>
        </div>
    </div>
</div>
<script src="https://api.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.js"></script>
<link href="https://api.mapbox.com/mapbox-gl-js/v1.6.1/mapbox-gl.css" rel="stylesheet" />
<style>
    body {
        margin: 0;
        padding: 0;
    }

    #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
    }
</style>
<style>
    .geocoder {
        position: absolute;
        z-index: 1;
        width: 50%;
        left: 50%;
        margin-left: -25%;
        top: 20px;
    }

    .mapboxgl-ctrl-geocoder {
        min-width: 100%;
    }
</style>

<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.4.2/mapbox-gl-geocoder.css"
      type="text/css" />
<!-- Promise polyfill script required to use Mapbox GL Geocoder in IE 11 -->
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/es6-promise@4/dist/es6-promise.auto.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
<link href="~/Scripts/jquery.tagsinput.min.css" rel="stylesheet" />

<script src="~/Scripts/jquery.tagsinput.min.js"></script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#input-tags').tagsInput();
        //$('#Tags').val() == $('.txtTgs').val();
    });
</script>
<script>
    $(document).ready(function () {

        mapboxgl.accessToken = 'pk.eyJ1Ijoia2lyaXQtMTIzIiwiYSI6ImNrNWdnNnlnazA2d2QzbG54aDV5eThncWcifQ.yvztWD2nJwJihpS6LI-MRQ';
        var map = new mapboxgl.Map({
            container: 'map_canvas',
            style: 'mapbox://styles/mapbox/streets-v11',
            center: [-79.4512, 43.6568],
            zoom: 13
        });

        map.on('click', function (e) {
            document.getElementById('txtLocation').value = e.lngLat;
        });

        var geocoder = new MapboxGeocoder({
            accessToken: mapboxgl.accessToken,
            mapboxgl: mapboxgl
        });

        document.getElementById('geocoder').appendChild(geocoder.onAdd(map));
        //if (navigator.geolocation) {
        //    navigator.geolocation.getCurrentPosition(success);
        //}
        //else {
        //    var myLatlng = new google.maps.LatLng("23.0746029", "72.5187049", "ahmedabad");
        //    var myOptions = {
        //        center: myLatlng,
        //        zoom: 12,
        //        mapTypeId: google.maps.MapTypeId.ROADMAP
        //    };
        //    var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        //    google.maps.event.addListener(map, 'click', function (event) {
        //        var result = [event.latLng.lat(), event.latLng.lng()];
        //        onclicksuccess(result);
        //    });
        //}
        //function success(position) {
        //    var lat = position.coords.latitude;
        //    var long = position.coords.longitude;
        //    //var city = position.coords.locality;
        //    var myLatlng = new google.maps.LatLng(lat, long);
        //    var myOptions = {
        //        center: myLatlng,
        //        zoom: 12,
        //        mapTypeId: google.maps.MapTypeId.ROADMAP
        //    };
        //    var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);

        //    google.maps.event.addListener(map, 'click', function (event) {
        //        var result = [event.latLng.lat(), event.latLng.lng()];
        //        onclicksuccess(result);
        //    });
        //    var marker = new google.maps.Marker({
        //        position: myLatlng,
        //        draggable: true,
        //        title: "lat: " + lat + " long: " + long
        //    });

        //    marker.setMap(map);
        //    var infowindow = new google.maps.InfoWindow({ content: "<b>User Address</b><br/> Latitude:" + lat + "<br /> Longitude:" + long + "" });
        //    $('#txtLocation').val("lat: " + lat + " long: " + long);
        //    infowindow.open(map, marker);
        //}
        //function onclicksuccess(position) {
        //    debugger;
        //    var lat = position[0];
        //    var long = position[1];
        //    //var city = position.coords.locality;
        //    var myLatlng = new google.maps.LatLng(lat, long);
        //    var myOptions = {
        //        center: myLatlng,
        //        zoom: 12,
        //        mapTypeId: google.maps.MapTypeId.ROADMAP
        //    };
        //    var map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
        //    google.maps.event.addListener(map, 'click', function (event) {
        //        var result = [event.latLng.lat(), event.latLng.lng()];
        //        onclicksuccess(result);
        //    });
        //    var marker = new google.maps.Marker({
        //        position: myLatlng,
        //        draggable: true,
        //        title: "lat: " + lat + " long: " + long
        //    });

        //    marker.setMap(map);
        //    var infowindow = new google.maps.InfoWindow({ content: "<b>User Address</b><br/> Latitude:" + lat + "<br /> Longitude:" + long + "" });
        //    $('#txtLocation').val("lat: " + lat + " long: " + long);
        //    infowindow.open(map, marker);
        //}

        $("#btnSave").click(function () {
            debugger
            var TagString = '';
            var TagList = $(".tag");
            if (TagList.length > 0) {
                for (var i = 0; i < TagList.length; i++) {
                    var Tag = TagList[i].innerText.slice(0, -1).trim();
                    TagString += Tag + ',';
                }
            }
            $("#txtTaglist").val(TagString);
        });


        $('#txtstartdate').datetimepicker({
            dayOfWeekStart: 1,
            lang: 'en',
            interval: 30,
            timepicker: true,
            //maxDate: new Date(),
            minDate: new Date(),
            scrollMonth: false,
            format: 'd/m/yy h:m',
            //formatTime: 'h:m',
            //formatDate: 'd/m/yy',
            dynamic: false,
            closeOnDateSelect: true
        });

        $('#txtEndtime').datetimepicker({
            dayOfWeekStart: 1,
            lang: 'en',
            interval: 30,
            timepicker: true,
            //maxDate: new Date(),
            minDate: new Date(),
            scrollMonth: false,
            //format: 'd/m/Y',
            format: 'd/m/yy H:m',
            // formatTime: 'h:m:s',
            //formatDate: 'd/m/yy',
            dynamic: false,
            closeOnDateSelect: true
        });

        $('#txtstartdate').change(function () {
            debugger
            var enDate = $("#txtEndtime").val();
            if (enDate != "" && enDate != null && enDate != "undefined") {
                var EnteredDate = $("#txtstartdate").val(); // For JQuery

                var date = EnteredDate.substring(0, 2);
                var month = EnteredDate.substring(3, 5);
                var year = EnteredDate.substring(6, 10);

                var myDate = new Date(year, month - 1, date);

                var today = new Date();

                var txtEndDate = $("#txtEndtime").val();
                var date1 = txtEndDate.substring(0, 2);
                var month1 = txtEndDate.substring(3, 5);
                var year1 = txtEndDate.substring(6, 10);
                var myDate1 = new Date(year1, month1 - 1, date1);
                if (myDate > myDate1) {
                    //  toastr.error("startdate is not less than today's date ");
                    toastr.error(" Start date cannot be Grater than End date");
                    $("#txtstartdate").val('');
                }
            }
        });
        $('#txtEndtime').change(function () {
            debugger
            var EnteredDate = $("#txtEndtime").val(); // For JQuery

            var date = EnteredDate.substring(0, 2);
            var month = EnteredDate.substring(3, 5);
            var year = EnteredDate.substring(6, 10);

            var myDate = new Date(year, month - 1, date);
            var today = $("#txtstartdate").val();

            if (today > myDate) {
                //  toastr.error("EndDate is not less than today's date ");
                toastr.error("End date cannot be less than current date");
                $("#txtEndDate").val('');
            }
            else {

                var txtStartDate = $("#txtstartdate").val();
                var date1 = txtStartDate.substring(0, 2);
                var month1 = txtStartDate.substring(3, 5);
                var year1 = txtStartDate.substring(6, 10);
                var myDate1 = new Date(year1, month1 - 1, date1);

                if (myDate < myDate1) {
                    //  toastr.error("startdate is not less than today's date ");
                    toastr.error(" End date cannot be Less than Start date");
                    $("#txtEndtime").val('');
                }
            }
        });

        setTimeout(function () {
            $('#msgDisply').fadeOut('fast');
        }, 2000);
        $("#PostedImage").change(function () {
            if (typeof (FileReader) != "undefined") {
                var dvPreview = $("#divImageMediaPreview");
                dvPreview.html("");
                $($(this)[0].files).each(function () {
                    debugger
                    var file = $(this);
                    var reader = new FileReader();
                    reader.onload = function (e) {
                        var img = $("<img />");
                        img.attr("class", "img-rounded");
                        img.attr("style", "max-width:150px;margin:1%;");
                        img.attr("src", e.target.result);
                        dvPreview.append(img);
                    }
                    reader.readAsDataURL(file[0]);
                });
            } else {
                alert("This browser does not support HTML5 FileReader.");
            }
        });
    });
</script>

